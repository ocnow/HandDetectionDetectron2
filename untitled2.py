# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ect1RZxJiFvLKsH1Sihwt3ZidQ8i5HTU
"""

import torch, torchvision
import torch
assert torch.__version__.startswith("1.7")

# Some basic setup:
# Setup detectron2 logger
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import numpy as np
import os, json, cv2, random
from google.colab.patches import cv2_imshow

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

import pandas as pd
import scipy.io as sio

!wget http://vision.soic.indiana.edu/egohands_files/egohands_data.zip
!unzip egohands_data.zip > /dev/null

BASE_PATH = '_LABELLED_SAMPLES/'

folders = os.listdir('_LABELLED_SAMPLES')

folder_names = []
image_names = []
polygons_master = []

for folder in folders:
  img_names = [x for x in os.listdir(BASE_PATH + folder) if x.split('.')[-1] == 'jpg']
  poly_file = sio.loadmat(BASE_PATH + folder +'/'+ 'polygons.mat')['polygons'][0]
  i = 0
  for img_name in img_names:
    folder_names.append(folder)
    image_names.append(img_name)
    polygons_master.append(poly_file[i])
    i = i + 1

len(polygons_master)

df = pd.DataFrame({'folder_name':folder_names,'image_names':image_names,'polygons':polygons_master})

from sklearn.model_selection import train_test_split

train,test = train_test_split(df,test_size=0.2)

from detectron2.structures import BoxMode

hands = train.loc[0]

filename = os.path.join(BASE_PATH + hands['folder_name'],hands['image_names'])

filename

cv2.imread(filename).shape[:2]

def get_balloon_dicts(img_dir):
  df = None
  if img_dir == 'train':
    df = train
  else:
    df = test
  
  dataset_dicts = []
  i = 0
  for index, row in df.iterrows():
    i = i + 1
    print("doing for index "+str(i))
    record = {}

    filename = os.path.join(BASE_PATH + row['folder_name'], row['image_names'])
    #height, width = cv2.imread(filename).shape[:2]

    record["file_name"] = filename
    record["image_id"] = row['image_names'].split('.')[0]
    record["height"] = 720
    record["width"] = 1280

    annos = row['polygons']
    objs = []
    
    for hand in annos:
      x_min = 2000
      y_min = 2000
      x_max = -1
      y_max = -1

      #array to hold x and y values of hand pixels
      poly = []

      if hand.size > 0:
        for pixel in hand:
          x = int(pixel[0])
          y = int(pixel[1])
          
          poly.append(x)
          poly.append(y)
          
          if  x > x_max:
              x_max = x
          if x < x_min:
              x_min = x
          if y > y_max:
              y_max = y
          if y < y_max:
              y_min = y
          
          #array to corners of bbox
          corners = [x_min,y_min,x_max,y_max]

          obj = {
                "bbox": corners,
                "bbox_mode": BoxMode.XYXY_ABS,
                "segmentation": [poly],
                "category_id": 0,
            }
          objs.append(obj)
    record["annotations"] = objs
    dataset_dicts.append(record)
  return dataset_dicts

dict = get_balloon_dicts('train')

dic2 = get_balloon_dicts('test')

# Radius of circle
radius = 20
  
# Blue color in BGR
color = (255, 0, 0)
  
# Line thickness of 2 px
thickness = 2

d= dic2[0]
img = cv2.imread(d['file_name'])
for objs in d["annotations"]:
  seg = objs["segmentation"]
  i = 0
  j = 1
  print(len(seg))
  while i<len(seg):
    img = cv2.circle(img, (seg[i],seg[j]), radius, color, thickness)
    i = i+2
    j = j+2



